import asyncio
import aiohttp
import json
import os
from typing import Dict, List, Set

# –ò–º–ø–æ—Ä—Ç –∏–∑ –º–æ–¥—É–ª–µ–π
from models import Resume, Account, AccountResumePair
from utils import (
    EXPERIENCE_OPTIONS, 
    display_accounts_info, 
    get_experience_from_user, 
    get_search_order_from_user, 
    use_saved_settings,
    get_website_version
)
from vacancy_processor import process_resume_vacancies

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ACCOUNTS_FILE = "accounts.json"

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    try:
        with open(ACCOUNTS_FILE, "r", encoding="utf-8") as file:
            accounts_data = json.load(file)
    except FileNotFoundError:
        print(f"–§–∞–π–ª {ACCOUNTS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    accounts = []
    all_search_queries = set()
    
    for account_data in accounts_data:
        resumes = [
            Resume(
                hash=resume["hash"], 
                query=resume["search_criteria"]["query"],
                blacklist=resume["search_criteria"].get("exclude_words", [])
            ) 
            for resume in account_data["resumes"]
        ]
        if resumes:  # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—é–º–µ
            accounts.append(Account(email=account_data["email"], resumes=resumes))
            for resume in resumes:
                all_search_queries.add(resume.query)

    if not accounts:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Ä–µ–∑—é–º–µ.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    display_accounts_info(accounts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saved_settings = use_saved_settings()
    all_search_queries_list = list(all_search_queries)

    if saved_settings["use_saved"]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        experience_list = saved_settings.get("experience", [])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if saved_settings.get("search_order"):
            ordered_search_queries = sorted(
                all_search_queries_list, 
                key=lambda q: saved_settings["search_order"].get(q, 999)
            )
        else:
            ordered_search_queries = all_search_queries_list
            
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        experience_labels = [
            next((opt['label'] for opt in EXPERIENCE_OPTIONS.values() if opt['value'] == exp), exp) 
            for exp in experience_list
        ]
        print(f"\n–í—ã–±—Ä–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: {', '.join(experience_labels)}")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞")
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        experience_list = get_experience_from_user()
        experience_labels = [
            next((opt['label'] for opt in EXPERIENCE_OPTIONS.values() if opt['value'] == exp), exp) 
            for exp in experience_list
        ]
        print(f"\n–í—ã–±—Ä–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: {', '.join(experience_labels)}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ordered_search_queries = get_search_order_from_user(all_search_queries_list)

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∞–∫–∫–∞—É–Ω—Ç-—Ä–µ–∑—é–º–µ
    account_resume_pairs = []
    pair_id = 0
    
    for account in accounts:
        for resume in account.resumes:
            account_resume_pairs.append(AccountResumePair(account, resume, pair_id))
            pair_id += 1

    if not account_resume_pairs:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç-—Ä–µ–∑—é–º–µ.")
        return

    print(f"\n=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò ===")
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(account_resume_pairs)} –ø–∞—Ä –∞–∫–∫–∞—É–Ω—Ç-—Ä–µ–∑—é–º–µ")
    print(f"–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: {' ‚Üí '.join(ordered_search_queries)}")

    exhausted_pairs: List[int] = []
    pair_lock = asyncio.Lock()

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞
    website_version = get_website_version()

    session_headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "application/json",
        "X-Static-Version": website_version,
        "X-Xsrftoken": "1",
    }

    async with aiohttp.ClientSession(headers=session_headers) as session:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Ä—è–¥–∫–µ
        for search_query in ordered_search_queries:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω–æ–º—É –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            relevant_pairs = [
                pair for pair in account_resume_pairs 
                if pair.resume.query == search_query
            ]
            
            if not relevant_pairs:
                print(f"–ù–µ—Ç –ø–∞—Ä –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {search_query}")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
            available_pairs = [pair for pair in relevant_pairs if pair.pair_id not in exhausted_pairs]
            if not available_pairs:
                print(f"–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{search_query}' –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            pair_index = [0]
            
            await process_resume_vacancies(
                session, search_query, relevant_pairs, 
                exhausted_pairs, pair_lock, pair_index, experience_list, website_version
            )

    print(f"\nüéâ –ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

if __name__ == "__main__":
    asyncio.run(main())